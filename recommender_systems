#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 21 14:48:22 2020

@author: Neeraj

Description: Implementation of user and item based collaborative filtering, and a matrix factorization algorithm in Python.

Reference: Chapter 23 : Recommender Systems


"""

users_interests = [
    ["Hadoop", "Big Data", "HBase", "Java", "Spark", "Storm", "Cassandra"],
    ["NoSQL", "MongoDB", "Cassandra", "HBase", "Postgres"],
    ["Python", "scikit-learn", "scipy", "numpy", "statsmodels", "pandas"],
    ["R", "Python", "statistics", "regression", "probability"],
    ["machine learning", "regression", "decision trees", "libsvm"],
    ["Python", "R", "Java", "C++", "Haskell", "programming languages"],
    ["statistics", "probability", "mathematics", "theory"],
    ["machine learning", "scikit-learn", "Mahout", "neural networks"],
    ["neural networks", "deep learning", "Big Data", "artificial intelligence"],
    ["Hadoop", "Java", "MapReduce", "Big Data"],
    ["statistics", "R", "statsmodels"],
    ["C++", "deep learning", "artificial intelligence", "probability"],
    ["pandas", "R", "Python"],
    ["databases", "HBase", "Postgres", "MySQL", "MongoDB"],
    ["libsvm", "regression", "support vector machines"]
]

from collections import Counter

popular_interests = Counter(interest for user_interests in users_interests for interest in user_interests)


from typing import List, Tuple

def most_popular_new_interest(user_interests: List[str],
                             max_results: int  = 5) -> List[Tuple[str, int]]:
    suggestions = [(interest, frequency) for interest, frequency in popular_interests.most_common()
                  if interest not in user_interests]
    
    return suggestions[:max_results]

unique_interests = sorted({interest for user_interests in users_interests
                          for interest in user_interests})


def make_user_interest_vector(user_interests: List[str]) -> List[int]:
    """Given a list of interests, produce a vector whose ith element is 1 if unique_interest[i]
    is in the list, else 0"""
    
    # create a list of zeros for all unique interests    
    return [1 if interest in user_interests else 0 for interest in unique_interests ]

user_interest_vectors = [make_user_interest_vector(user_interests) for user_interests in users_interests]

from vector_operations import Vector, dot
import math
def cosine_similarity(v1: Vector, v2: Vector) -> float:
    return dot(v1, v2)/math.sqrt(dot(v1,v1) * dot(v2,v2))

user_similarities = [[cosine_similarity(interest_vector_i, interest_vector_j)
                    for interest_vector_j in user_interest_vectors]
                    for interest_vector_i in user_interest_vectors]
